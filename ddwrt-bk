#!/bin/sh
#########################################################
#   Script Requirements
#
#   Files:
#      vars_to_skip
#      vars_preferred
#      vars_to_include
#
#########################################################

#########################################################
# setup variables
#
# DATE                  - Date
# MAC                   - Mac address
# FILE                  - File Name Prefix
# CUR_DIR               - Current Directory
# TRANSFER              - FTP Transfer ON/OFF (Default is OFF)
# FOLDER                - Location where backup scripts are stored
# VARFILE               - Location & Name of Temp File
# TO_ALL                - Location & Name of script File with all nvram variables
# TO_INCLUDE    - Location & Name of script File with essential nvram variables
# TO_EXCLUDE    - Location & Name of script File with dangerous nvram variables
# TO_PREFERRED  - Location & Name of script File with preferred nvram variables
#
# wget -O /opt/usr/sbin/backupessential http://dd-ware.googlecode.com/svn/otrw2/backupessential
# wget -O /opt/usr/sbin/vars_to_skip http://dd-ware.googlecode.com/svn/otrw2/vars_to_skip
# wget -O /opt/usr/sbin/vars_to_include http://dd-ware.googlecode.com/svn/otrw2/vars_to_include
# wget -O /opt/usr/sbin/vars_preferred http://dd-ware.googlecode.com/svn/otrw2/vars_preferred
#
#########################################################
export PATH=/opt/bin:/opt/sbin:/opt/usr/sbin:/bin:/usr/bin:/sbin:/usr/sbin:/jffs/sbin:/jffs/bin:/jffs/usr/sbin:/jffs/usr/bin:/mmc/sbin:/mmc/bin:/mmc/usr/sbin:/mmc/usr/bin

DATE=`date +%Y%m%d%S`
HOST=`nvram get wan_hostname | tr -d ":"`
FILE=""
NAME="$0"
[ -z "`which readlink`" ] || NAME="`readlink -f "${NAME}"`"
CUR_DIR=`dirname ${NAME}`
CONF_DIR='/opt/etc/ddwrt-bk'
BK_DIR=/jffs/ddwrt-backups
TMP_DIR=/tmp/ddwrt-bk

RESTORE=0
IMG=0
NVR=0
TYPE=minimal
PROMPT=1

TO_ALL=${TMP_DIR}/all.sh
TO_INCLUDE=${TMP_DIR}/essential.sh
TO_EXCLUDE=${TMP_DIR}/dangerous.sh
TO_PREFERRED=${TMP_DIR}/preferred.sh
TO_MINIMAL=${TMP_DIR}/minimal.sh

#########################################################
# read command line switches
#
#   example command lines
#
#   ./ddwrt-bk -r -i -f /jffs/backups/ddwrt-2015100601.tar.gz
#
#   Restores the nvram backup from the ddwrt-2015100601.tar.gz archive
#
#   ./ddwrt-bk -r -t minimal -f /jffs/backups/ddwrt-2015100601.tar.gz
#
#   ./ddwrt-bk -i -n -f /jffs/backups/ddwrt-2015100601.tar.gz 
#
#   The above command with use the user and password and
#   server information from the command line
#
#########################################################

while getopts rinyt:f:? name
do
    case $name in
	r)   RESTORE=1;;
	i)   IMG=1;;
	n)   NVR=1;;
	t)   TYPE="$OPTARG";;
	f)   FILE="$OPTARG";;
	y)   PROMPT=0;;
	?)   printf "Usage: %s: [-r] [-n] [-i] [-t type] [-f file]\n" $0
	exit 2;;
    esac
done
shift $(($OPTIND - 1))

##########################################################
# Validations
##########################################################

CR=`printf "\r"`

if [ ! -d "${TMP_DIR}" ]; then
    mkdir ${TMP_DIR}
else
    rm -rf ${TMP_DIR}/*
fi
if [ ! -d "${BK_DIR}" ]; then
    mkdir ${BK_DIR}
fi

if [ ! -f "${CONF_DIR}/vars_to_skip" ] ; then
 echo "${CONF_DIR}/vars_to_skip is missing"
 exit 1
fi
if [ ! -f "${CONF_DIR}/vars_to_include" ] ; then
 echo "${CUR_DIR}/vars_to_include is missing"
 exit 1
fi
if [ ! -f "${CONF_DIR}/vars_preferred" ] ; then
 echo "${CUR_DIR}/vars_preferred is missing"
 exit 1
fi
if [ ! -f "${CONF_DIR}/vars_minimal" ] ; then
 echo '^cron
^wan_wins
^wan_up
^wl_ssid
^wl_net_mode
^wl_channel
^wl_nm
^wl_net_mode
^wl_nband
^wl_mrate
^wl0_wds1_
^wl0_wds
^wl0_ssid
^wl0_wchannel
^wl0_ssid
^wl0_phy
^wl0_net_mode
^wl0_nctrlsb
^wl0_nbw
^wl0_nband
^wl0_nm
^wl0_nreqd
^wk_mode
^wan_proto
^wan_hostname
^wan_dns
^wan_domain
^usb_
^qos
^wshaper_uplink
^wshaper_downlink
^wshaper_enable
^wshaper_downlink
^wshaper_dev
^svqos_svcs
^svqos_macs
^static_lease
^sshd_enable
^sshd_wanport
^sshd_authorized_keys
^snmpd_
^syslogd_enable
^remote_mgt_ssh
^remote_management
^dns_dnsmasq
^dnsmasq_
^dmz_
^enable_jffs2
^log_
^local_dns
^lan_ipaddr
^lan_domain
^rc_
^http_wanport
^http_username
^http_passwd
^http_lanport
^https_enable
^http_enable
^fullswitch
^forwardspec_entries
^forward_port$
^forward_spec
^forward_entries
^forward_cur
^ddns_enable
^ddns_username
^ddns_hostname
^ddns_passwd
^dhcp_
^block_wan
^cron' > "${CONF_DIR}/vars_minimal"
fi

#########################################################
# Cleanup line returns and blank lines
#########################################################

grep -q "${CR}" "${CONF_DIR}/vars_to_skip"    && sed -i -e 's/\r//g' "${CONF_DIR}/vars_to_skip"
grep -q "${CR}" "${CONF_DIR}/vars_to_include" && sed -i -e 's/\r//g' "${CONF_DIR}/vars_to_include"
grep -q "${CR}" "${CONF_DIR}/vars_preferred"  && sed -i -e 's/\r//g' "${CONF_DIR}/vars_preferred"
grep -q "${CR}" "${CONF_DIR}/vars_minimal"  && sed -i -e 's/\r//g' "${CONF_DIR}/vars_minimal"

grep -q "^ *$" "${CONF_DIR}/vars_minimal"     && sed -i -e '/^ *$/d' "${CONF_DIR}/vars_minimal"
grep -q "^ *$" "${CONF_DIR}/vars_preferred"   && sed -i -e '/^ *$/d' "${CONF_DIR}/vars_preferred"
grep -q "^ *$" "${CONF_DIR}/vars_to_include"  && sed -i -e '/^ *$/d' "${CONF_DIR}/vars_to_include"
grep -q "^ *$" "${CONF_DIR}/vars_to_skip"     && sed -i -e '/^ *$/d' "${CONF_DIR}/vars_to_skip"


if [ ${RESTORE} -eq 0 ]; then
    if [ "${FILE}" == "" ]; then
	FILE=${BK_DIR}/${HOST}-${DATE}.tar.gz
    fi
    if [ ${NVR} -eq 1 ]; then
	echo "Backing up portable nvram values..."
	#########################################################
	#create NVRAM variale list and write to ${TMP_DIR}/all_vars
	#########################################################
	
	nvram show 2>/dev/null | egrep '^[A-Za-z][A-Za-z0-9_\.\-]*=' | awk -F= '{print $1}' | sort -ruo ${TMP_DIR}/all_vars
	
	#########################################################
	# Write header to restore scripts
	#########################################################
	
	echo -e "#!/bin/sh\n#\necho \"Write variables\"\n" | tee -i ${TO_EXCLUDE} | tee -i ${TO_PREFERRED} | tee -i  ${TO_ALL} | tee -i ${TO_MINIMAL} > ${TO_INCLUDE}
	
	#########################################################
	# scan NVRAM variable list and send variable to proper
	# restore script
	#########################################################
	
	while read var ; do
	    pref=0
	    minim=0
	    if echo "${var}" | grep -q -f "${CONF_DIR}/vars_to_skip" ; then
		bfile=$TO_EXCLUDE
	    else
		bfile=$TO_INCLUDE
		pref=`echo "${var}"  | grep -cf "${CONF_DIR}/vars_preferred"`
		minim=`echo "${var}" | grep -cf "${CONF_DIR}/vars_minimal"`
	    fi
	    
	    # get the data out of the variable
	    data="`nvram get ${var}`"
	    # write the var to the file and use \ for special chars: (\$`")
	    echo -en "nvram set ${var}=\"" | tee -ia ${TO_ALL} >> ${bfile}
	    echo -n "${data}" |  sed -e 's/[$`"\]/\\&/g' | tee -ia  ${TO_ALL} >> ${bfile}
	    echo -e "\"" | tee -ia  ${TO_ALL} >> ${bfile}
	    if [ ${pref} -ne 0 ]; then
		echo -en "nvram set ${var}=\"" >> ${TO_PREFERRED}
		echo -n "${data}" |  sed -e 's/[$`"\]/\\&/g' >> ${TO_PREFERRED}
		echo -e "\"" >> ${TO_PREFERRED}
	    fi
	    if [ ${minim} -ne 0 ]; then
		echo -en "nvram set ${var}=\"" >> ${TO_MINIMAL}
		echo -n "${data}" |  sed -e 's/[$`"\]/\\&/g' >> ${TO_MINIMAL}
		echo -e "\"" >> ${TO_MINIMAL}
	    fi
	done <${TMP_DIR}/all_vars
	
	#########################################################
	# cleanup remove all_vars
	# uncomment to remove file
	#########################################################
	
	rm ${TMP_DIR}/all_vars
	
	#########################################################
	# Write footer to restore script
	#########################################################
	
	echo -e "\n# Commit variables\necho \"Save variables to nvram\"\nnvram commit"  | tee -ia  ${TO_ALL} | tee -ia  ${TO_PREFERRED} | tee -ia  ${TO_EXCLUDE} | tee -ia  ${TO_MINIMAL} >> ${TO_INCLUDE}
	
	#########################################################
	# Change permissions on restore scripts to make them
	# executable
	#########################################################
	
	chmod +x ${TO_INCLUDE}
	chmod +x ${TO_PREFERRED}
	chmod +x ${TO_EXCLUDE}
	chmod +x ${TO_ALL}
	chmod +x ${TO_MINIMAL}
	
    fi
    if [ ${IMG} -eq 1 ]; then
	echo "Backing up nvram image..."
	nvram backup ${TMP_DIR}/nvram.img
    fi

    #########################################################
    # Compress restore scripts
    #########################################################
    echo "Compressing backup and cleaning up..."
    
    tar -cvzf ${FILE} -C ${TMP_DIR} .

    rm -rf ${TMP_DIR}
    echo "Backup Complete"
fi
if [ ${RESTORE} -eq 1 ]; then
    #Validation, only -i or -n can be used
    if [ "${FILE}" == "" ]; then
	echo "No restore file provided. What do you want me to restore?"
	exit 1
    fi
    if [ ${IMG} -eq 1 -a ${NVR} -eq 1 ]; then
	echo "Unsupported restore mode. Please select only one restore mode."
	exit 1
    fi
    if [ ${IMG} -eq 0 -a ${NVR} -eq 0 ]; then
	echo "You must select a restore mode -i or -n"
	exit 1
    fi
    tar -xzf ${FILE} -C ${TMP_DIR}
    if [ $? -eq 0 ]; then
	if [ ${PROMPT} -eq 1 ]; then
	    echo "This operation will overwrite the current configuration of this device. You will need to reboot for changes to take effect."
	    while true; do
		read -p "Press 'Yes' to continue?" yn
		case $yn in
		    [Y]* ) break;;
		    [Nn]* ) rm -rf ${TMP_DIR} && exit 255;;
		    * ) echo "Please answer Yes or No.";;
		esac
	    done
	fi
	if [ ${IMG} -eq 1 ]; then
	    #Extract image from backup
	    nvram restore ${TMP_DIR}/nvram.img
	fi
	if [ ${NVR} -eq 1 ]; then	   	    
	    case $TYPE in
		"all" )
		    if [ ${PROMPT} -eq 1 ]; then
			echo "This restore type is device specific"
			while true; do
			    read -p "Are you sure you want to continue? (Yes|No)" yn
			    case $yn in
				[Y]* ) break;;
				[Nn]* ) rm -rf ${TMP_DIR} && exit 255;;
				* ) echo "Please answer Yes or No.";;
			    esac
			done
		    fi
		    ${TMP_DIR}/all.sh
		    ;;
		"essential" )
		    echo "Restoring "${TYPE}" nvram parameters..."
		    ${TMP_DIR}/essential.sh
		    ;;
		"preferred" )
		    echo "Restoring "${TYPE}" nvram parameters..."
		    ${TMP_DIR}/preferred.sh
		    ;;
		"dangerous" )
		    if [ ${PROMPT} -eq 1 ]; then
			echo "This restore type is device specific"
			while true; do
			    read -p "Are you sure you want to continue? (Yes|No)" yn
			    case $yn in
				[Y]* ) break;;
				[Nn]* ) rm -rf ${TMP_DIR} && exit 255;;
				* ) echo "Please answer Yes or No.";;
			    esac
			done
		    fi
		    echo "Restoring "${TYPE}" nvram parameters..."
		    ${TMP_DIR}/dangerous.sh
		    ;;
		"minimal" )
		    echo "Restoring "${TYPE}" nvram parameters..."
		    ${TMP_DIR}/minimal.sh
		    ;;
		* )
		    echo "Unsupported restore type "${TYPE}"."
		    exit 1
		    ;;
	    esac
	fi
    fi
    rm -rf ${TMP_DIR}
    echo "Please reboot this device to complete the restore"
fi
